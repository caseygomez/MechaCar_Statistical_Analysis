install.packages("tidyverse")
install.packages("jsonlite")
setwd("/Users/caseymacbook/Desktop/R_Analysis")
setwd("/Users/caseymacbook/bc/hw/16/R_Analysis")
setwd("~/bc/hw/16/R_Analysis")
setwd("~/bc/hw/16/R_Analysis/01-Demo")
x <- 3
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
demo_table <- read.csv(file='demo.csv',check.names=F, stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F, stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
View(demo_table)
View(demo_table)
View(demo_table)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
library(jsonlite)
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
> demo_table[3,3]
demo_table[3,3]
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 3),]
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
library(tidyverse)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
View(demo_table)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
long_table <- gather(demo_table3,key='Metric',value='Score',buying_price:popularity)
View(long_table)
winde_table <-long_table %>% spread(key='Metric',value='Score')
View(winde_table)
all.equal(demo_table3,winde_table)
head(mpg)
plt <-ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
> plt + geom_col() #plot a bar plo
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
> mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
> plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
View(mpg_summary)
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(16:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1), color="Vehicle Class",shape="Type of Drive") #add boxplot and rotate x-axis labels 45 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot(outlier.colour = "red", outlier.shape = 1) + theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
> mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
> ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
shapiro.test(mtcars$wt)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2.  plt + geom_density() #visualize distribution using density plot
View(population_table)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("/Users/caseymacbook/bc/hw/16/MechaCar_Statistical_Analysis")
library(dplyr)
mechaCar_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
View(mechaCar_table)
View(mechaCar_table)
head(mechaCar_table)
lm(vehicle_length ~ vehicle_weight ~ spoiler_angle ~ ground_clearance ~ AWD ~ mpg,mechaCar_table)
mechaCarmatrix <- as.matrix(mechaCar_table[c,("vehicle_length","vehicle_weight","spoiler_angle","ground_clearance","AWD","mpg")])
mechaCarmatrix <- as.matrix(mechaCar_table[,c("vehicle_length","vehicle_weight","spoiler_angle","ground_clearance","AWD","mpg")])
View(mechaCarmatrix)
lm(vehicle_length ~ vehicle_weight ~ spoiler_angle ~ ground_clearance ~ AWD ~ mpg,mechaCarmatrix)
lm(vehicle_length ~ vehicle_weight ~ spoiler_angle ~ ground_clearance ~ AWD ~ mpg,mechaCar_table)
> lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg,data=mechaCar_table)
lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg,data=mechaCar_table)
summary(lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg,data=mechaCar_table))
lm(MPG ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechaCar_table)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechaCar_table)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechaCar_table))
plt <- ggplot(mechaCar_table,aes(x=mpg,y=vehicle_weight,color=red) #import dataset into ggplot2
plt + geom_point() + labs(x="City Fuel-Efficiency (MPG)", y="Venhicle Weight") #add scatter plot with multiple aesthetics
plt <- ggplot(mechaCar_table,aes(x=mpg,y=vehicle_length)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Fuel Efficieny (MPG)",y="Vehicle Length") #add scatter plot
plt <- ggplot(mechaCar_table,aes(x=mpg,y=vehicle_length)) #import dataset into ggplot2
plt + geom_point(size=2) + labs(x="Fuel Efficieny (MPG)",y="Vehicle Length") #add scatter plot
plt <- ggplot(mechaCar_table,aes(x=mpg,y=vehicle_weight)) #import dataset into ggplot2
plt + geom_point(size=2) + labs(x="Fuel Efficieny (MPG)",y="Vehicle Weight") #add scatter plot
plt <- ggplot(mechaCar_table,aes(x=mpg,y=spoiler_angle)) #import dataset into ggplot2
plt + geom_point(size=2) + labs(x="Fuel Efficieny (MPG)",y="Spoiler Angle") #add scatter plot
plt <- ggplot(mechaCar_table,aes(x=mpg,y=ground_clearance)) #import dataset into ggplot2
> plt + geom_point(size=2) + labs(x="Fuel Efficieny (MPG)",y="Ground Clearance") #add scatter plot
plt <- ggplot(mechaCar_table,aes(x=mpg,y=ground_clearance)) #import dataset into ggplot2 mpg by ground_clearance
plt + geom_point(size=2) + labs(x="Fuel Efficieny (MPG)",y="Ground Clearance") #add scatter plot
plt <- ggplot(mechaCar_table,aes(x=mpg,y=ground_clearance)) #import dataset into ggplot2 mpg by ground_clearance
plt + geom_point(size=2) + labs(x="Fuel Efficieny (MPG)",y="Ground Clearance") #add scatter plot
cor(mechaCar_table$mpg,mechaCar_table$ground_clearance) #calculate correlation coefficient
plt <- ggplot(mechaCar_table,aes(x=mpg,y=AWD)) #import dataset into ggplot2 mpg by AWD
plt + geom_point(size=2) + labs(x="Fuel Efficieny (MPG)",y="All Wheel Drive") #add scatter plot
cor(mechaCar_table$mpg,mechaCar_table$awd) #calculate correlation coefficient
plt <- ggplot(mechaCar_table,aes(x=mpg,y=AWD)) #import dataset into ggplot2 mpg by AWD
plt + geom_point(size=2) + labs(x="Fuel Efficieny (MPG)",y="All Wheel Drive") #add scatter plot
plt <- ggplot(mechaCar_table,aes(x=mpg,y=AWD)) #import dataset into ggplot2 mpg by AWD
plt + geom_point(size=2) + labs(x="Fuel Efficieny (MPG)",y="All Wheel Drive") + geom_line(aes(y=yvals), color = "red")#add scatter plot
> plt <- ggplot(mechaCar_table,aes(x=mpg,y=AWD)) #import dataset into ggplot2 mpg by AWD
plt <- ggplot(mechaCar_table,aes(x=mpg,y=AWD)) #import dataset into ggplot2 mpg by AWD
plt + geom_point(size=2) + geom_line(aes(y=yvals), color = "red") + labs(x="Fuel Efficieny (MPG)",y="All Wheel Drive")#
model <- lm(mpg ~ awd,mechaCar_table)
> plt <- ggplot(mechaCar_table,aes(x=mpg,y=AWD)) #import dataset into ggplot2 mpg by AWD
plt <- ggplot(mechaCar_table,aes(x=mpg,y=AWD)) #import dataset into ggplot2 mpg by AWD
plt + geom_point(size=2) + geom_line(aes, color = "red") + labs(x="Fuel Efficieny (MPG)",y="All Wheel Drive")#
> plt <- ggplot(mechaCar_table,aes(x=mpg,y=AWD)) #import dataset into ggplot2 mpg by AWD
plt <- ggplot(mechaCar_table,aes(x=mpg,y=AWD)) #import dataset into ggplot2 mpg by AWD
plt + geom_point(size=2) + geom_line(color = "red") + labs(x="Fuel Efficieny (MPG)",y="All Wheel Drive")#
plt <- ggplot(mechaCar_table,aes(x=mpg,y=ground_clearance)) #import dataset into ggplot2 mpg by ground_clearance
plt + geom_point(size=2) + geom_line(color = "red") + labs(x="Fuel Efficieny (MPG)",y="Ground Clearance") #add scatter plot
plt <- ggplot(mechaCar_table,aes(x=mpg,y=AWD)) #import dataset into ggplot2 mpg by AWD, no correclation
plt + geom_point(size=2) + geom_line(aes(y=-3.411e+00),color = "red") + labs(x="Fuel Efficieny (MPG)",y="All Wheel Drive")#
plt <- ggplot(mechaCar_table,aes(x=mpg,y=ground_clearance)) #import dataset into ggplot2 mpg by ground_clearance
plt + geom_point(size=2) + geom_line(aes(y=3.546e+00 ),color = "red") + labs(x="Fuel Efficieny (MPG)",y="Ground Clearance") #add scatter plot
plt <- ggplot(mechaCar_table,aes(x=mpg,y=AWD)) #import dataset into ggplot2 mpg by AWD, no correlation
plt + geom_point(size=2) + geom_line(aes(y=-1.040e+02),color = "red") + labs(x="Fuel Efficieny (MPG)",y="All Wheel Drive")#
lm(mpg~vehicle_weight,mechaCar_table)
summary(lm(mpg~vehicle_weight,mechaCar_table)) #summarize linear model
model <- lm(mpg ~ vehicle_weight,mechaCar_table) #create linear model
yvals <- model$coefficients['vehicle_weight']*mechaCar_table$mpg +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
lm(mpg~vehicle_length,mechaCar_table)
summary(lm(formula = mpg ~ vehicle_length, data = mechaCar_table))
model <- lm(mpg ~ vehicle_length,mechaCar_table) #create linear model
yvals <- model$coefficients['vehicle_length']*mechaCar_table$mpg +
+     model$coefficients['(Intercept)'] #determine y-axis values from linear model
model <- lm(mpg ~ vehicle_length,mechaCar_table) #create linear model
yvals <- model$coefficients['vehicle_length']*mechaCar_table$mpg +
+      model$coefficients['(Intercept)'] #determine y-axis values from linear model
model <- lm(mpg ~ vehicle_length,mechaCar_table) #create linear model
yvals <- model$coefficients['vehicle_length']*mechaCar_table$mpg +     model$coefficients['(Intercept)'] #determine y-axis values from linear model
lm(mpg ~ vehicle_weight,mechaCar_table)
model2 <- lm(mpg ~ vehicle_length,mechaCar_table) #create linear model
yvals <- model2$coefficients['vehicle_length']*mechaCar_table$mpg +
model2$coefficients['(Intercept)'] #determine y-axis values from linear model
model <- lm(mpg ~ vehicle_length,mechaCar_table) #create linear model
yvals <- model$coefficients['vehicle_length']*mechaCar_table$mpg +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
model24 <- lm(mpg ~ vehicle_length,mechaCar_table) #create linear model
yvals <- model$coefficients['vehicle_length']*mechaCar_table$mpg +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
model24 <- lm(mpg ~ vehicle_length,mechaCar_table) #create linear model
yvals <- model24$coefficients['vehicle_length']*mechaCar_table$mpg +
model24$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mechaCar_table,aes(x=mpg,y=vehicle_weight)) #import dataset into ggplot2 mpg by vehicle_weight
plt + geom_point(size=2) + geom_line(aes(y=4.042e+01 )) labs(x="Fuel Efficieny (MPG)",y="Vehicle Weight") #add scatter plot
plt <- ggplot(mechaCar_table,aes(x=mpg,y=vehicle_weight)) #import dataset into ggplot2 mpg by vehicle_weight
plt + geom_point(size=2) + geom_line(aes(y=4.042e+01 ), color= "red") labs(x="Fuel Efficieny (MPG)",y="Vehicle Weight") #add scatter plot
plt <- ggplot(mechaCar_table,aes(x=mpg,y=vehicle_weight)) #import dataset into ggplot2 mpg by vehicle_weight
plt + geom_point(size=2) + geom_line(aes(y=4.042e+01 ), color= "red") + labs(x="Fuel Efficieny (MPG)",y="Vehicle Weight") #add scatter plot
lm(mpg~ground_clearance,mechaCar_table) #linear model
summary(lm(formula = mpg ~ ground_clearance, data = mechaCar_table))
summary(lm(formula = mpg ~ spoiler_angle, data = mechaCar_table))
summary(lm(formula = mpg ~ awd, data = mechaCar_table))
summary(lm(formula = mpg ~ AWD, data = mechaCar_table))
coil_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F) #read in data
View(coil_table)
View(demo_table2)
View(demo_table2)
View(coil_table)
View(coil_table)
View(demo_table2)
View(coil_table)
total_summary <- coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean_psi=mean(PSI), .groups = 'keep')
View(total_summary)
total_summary <- coil_table %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI) .groups = 'keep')
View(coil_table)
total_summary <- coil_table %>% group_by(PSI) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI) .groups = 'keep')
total_summary <- coil_table %>% group_by(PSI) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
total_summary <- coil_table summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
total_summary <- coil_table summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
View(total_summary)
coil_table %>% summarize(mean=mean(PSI))
View(total_summary)
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI), .groups = 'keep')
total_summary <- coil_table %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI), .groups = 'keep')
lot_summary <- coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI),Median = median(PSI), Variance = var(PSI), SD = sd(PSI) , .groups = 'keep')
View(lot_summary)
t.test(coil_table$PSI,mu=mean(coil_table$PSI))
> total_summary <- coil_table %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI), .groups = 'keep')
total_summary <- coil_table %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI), .groups = 'keep')
lot_summary <- coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI),Median = median(PSI), Variance = var(PSI), SD = sd(PSI) , .groups = 'keep')
View(lot_summary)
t.test(coil_table$PSI,mu=mean(coil_table$PSI))
total_summary <- coil_table %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI), .groups = 'keep')
lot_summary <- coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI),Median = median(PSI), Variance = var(PSI), SD = sd(PSI) , .groups = 'keep')
View(lot_summary)
t.test(coil_table$PSI,mu=mean(coil_table$PSI))
t.test(subset(coil_table$PSI,coil_table$Manufacturing_Lot == "Lot1"),mu=mean(coil_table$PSI))
t.test(subset(coil_table$PSI,coil_table$Manufacturing_Lot == "Lot2"),mu=mean(coil_table$PSI))
t.test(subset(coil_table$PSI,coil_table$Manufacturing_Lot == "Lot3"),mu=mean(coil_table$PSI))
plt <- ggplot(mechaCar_table,aes(x=mpg,y=AWD)) #import dataset into ggplot2 mpg by AWD
plt + geom_point(size=2) + labs(x="Fuel Efficieny (MPG)",y="All Wheel Drive") #add scatter plot
t.test(coil_table$PSI,mu=mean(coil_table$PSI))
all_psi = coil_table['PSI']
t.test(all_psi[['PSI']], mu=1500)
lot1_psi = subest(coil_table, Manufacturing_Lot == "Lot1")
lot1_psi = subset(coil_table, Manufacturing_Lot == "Lot1")
t.test(lot1_psi[['PSI']], mu=1500)
lot2_psi = subset(coil_table, Manufacturing_Lot == "Lot2")
t.test(lot2_psi[['PSI']], mu=1500)
lot3_psi = subset(coil_table, Manufacturing_Lot == "Lot3")
t.test(lot3_psi[['PSI']], mu=1500)
